

/*
 * Line 986 Is event for Modify map
 */
package UI;

/**
 *
 * @author Student
 */
public class UI extends javax.swing.JFrame {

    /**
     * Creates new form UI
     */
    public UI() {
        initComponents();
        String[] CharNames = {"Fighter", "Rouge","Cleric","Ranger"};
        String[] MonsterNames = {"Shrub", "Tree", "Skeletons", "Goblin", "Boss Goblin", "Giant Crab","Hobgoblin", "Giant Fire Beetle"};
   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Char1Drop = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Char2Drop = new javax.swing.JComboBox<>();
        Char3Drop = new javax.swing.JComboBox<>();
        Char4Drop = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        Monster1Drop = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        Monster2Drop = new javax.swing.JComboBox<>();
        Monster3Drop = new javax.swing.JComboBox<>();
        Monster4Drop = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        Monster5Drop = new javax.swing.JComboBox<>();
        Monster6Drop = new javax.swing.JComboBox<>();
        Monster7Drop = new javax.swing.JComboBox<>();
        Monster8Drop = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        CustomMap = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Char1Drop.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Fighter", "Rogue", "Cleric", "Ranger", "Wizard", " " }));
        Char1Drop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Char1DropActionPerformed(evt);
            }
        });

        jLabel1.setText("Char 1");

        jLabel2.setText("Char 2");

        jLabel3.setText("Char 3");

        Char2Drop.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Fighter", "Rogue", "Cleric", "Ranger", "Wizard", " " }));

        Char3Drop.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Fighter", "Rogue", "Cleric", "Ranger", "Wizard", " " }));

        Char4Drop.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Fighter", "Rogue", "Cleric", "Ranger", "Wizard", " " }));

        jLabel4.setText("Char 4");

        Monster1Drop.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Bandit", "Boss Goblin", "Crab", "Fire Beatle", "Goblin", "Half Ogre", "Hobgoblin", "Kobold", "Ogre", "Shrub", "Skeleton", "Tree", "Warhorse Skeleton", "Wolf" }));

        jLabel5.setText("Monster 1");

        jButton1.setText("Continue");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Monster2Drop.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Bandit", "Boss Goblin", "Crab", "Fire Beatle", "Goblin", "Half Ogre", "Hobgoblin", "Kobold", "Ogre", "Shrub", "Skeleton", "Tree", "Warhorse Skeleton", "Wolf" }));

        Monster3Drop.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Bandit", "Boss Goblin", "Crab", "Fire Beatle", "Goblin", "Half Ogre", "Hobgoblin", "Kobold", "Ogre", "Shrub", "Skeleton", "Tree", "Warhorse Skeleton", "Wolf" }));

        Monster4Drop.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Bandit", "Boss Goblin", "Crab", "Fire Beatle", "Goblin", "Half Ogre", "Hobgoblin", "Kobold", "Ogre", "Shrub", "Skeleton", "Tree", "Warhorse Skeleton", "Wolf" }));

        jLabel6.setText("Monster 2");

        jLabel7.setText("Monster 3");

        jLabel8.setText("Monster 4");

        Monster5Drop.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Bandit", "Boss Goblin", "Crab", "Fire Beatle", "Goblin", "Half Ogre", "Hobgoblin", "Kobold", "Ogre", "Shrub", "Skeleton", "Tree", "Warhorse Skeleton", "Wolf" }));

        Monster6Drop.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Bandit", "Boss Goblin", "Crab", "Fire Beatle", "Goblin", "Half Ogre", "Hobgoblin", "Kobold", "Ogre", "Shrub", "Skeleton", "Tree", "Warhorse Skeleton", "Wolf" }));

        Monster7Drop.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Bandit", "Boss Goblin", "Crab", "Fire Beatle", "Goblin", "Half Ogre", "Hobgoblin", "Kobold", "Ogre", "Shrub", "Skeleton", "Tree", "Warhorse Skeleton", "Wolf" }));

        Monster8Drop.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Bandit", "Boss Goblin", "Crab", "Fire Beatle", "Goblin", "Half Ogre", "Hobgoblin", "Kobold", "Ogre", "Shrub", "Skeleton", "Tree", "Warhorse Skeleton", "Wolf" }));

        jLabel9.setText("Monster 5");

        jLabel10.setText("Monster 6");

        jLabel11.setText("Monster 7");

        jLabel12.setText("Monster 8");

        CustomMap.setText("Modify Map");
        CustomMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CustomMapActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Choose up to 4 \ncharacters and \nup to 8 monsters\n");
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CustomMap)
                        .addGap(57, 57, 57)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Char1Drop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel1)
                                        .addGap(18, 18, 18)
                                        .addComponent(Monster1Drop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(Monster5Drop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel9))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Char2Drop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)
                                        .addComponent(Monster2Drop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(Monster6Drop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel10))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Char3Drop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel3)
                                        .addGap(18, 18, 18)
                                        .addComponent(Monster3Drop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(Monster7Drop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel11))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Char4Drop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel4)
                                        .addGap(18, 18, 18)
                                        .addComponent(Monster4Drop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(Monster8Drop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel12)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButton1)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(CustomMap))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Char1Drop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(Monster1Drop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(Monster5Drop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Char2Drop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(Monster2Drop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(Monster6Drop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Char3Drop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(Monster3Drop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(Monster7Drop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Char4Drop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(Monster4Drop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(Monster8Drop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
  
    private void Char1DropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Char1DropActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Char1DropActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // create an array of creature type for the player characters (PC's) and one for monsters
        creature PCarray[];
        creature Monsterarray[];
        // i is the counter for placing player characters, j is the counter for monsters.
        int i = 0;
        int j = 0;
        // This set of if statments handle the first drop box of PC creaton
        if (Char1Drop.getSelectedItem().toString().equals("Fighter")){
            FighterChar FighterChar1= new FighterChar("Fighter1");
            PCarray[i]= FighterChar1;
            i++;
        }
        else if (Char1Drop.getSelectedItem().toString().equals("Rogue")){
            RogueChar RogueChar1= new RogueChar("Rogue1");
            PCarray[i]= RogueChar1;
            i++;
        }
        else if (Char1Drop.getSelectedItem().toString().equals("Cleric")){
            ClericChar ClericChar1= new ClericChar("Cleric1");
            PCarray[i]= ClericChar1;
            i++;
        }
        else if (Char1Drop.getSelectedItem().toString().equals("Ranger")){
            RangerChar RangerChar1= new RangerChar("Ranger1");
            PCarray[i]= RangerChar1;
            i++;
        }
        else if (Char1Drop.getSelectedItem().toString().equals("Wizard")){
            WizardChar WizardChar1= new WizardChar("Wizard1");
            PCarray[i]= WizardChar1;
            i++;
        }
        else if (Char1Drop.getSelectedItem().toString().equals("None")){
        }
        else{
            System.out.print(ERROR);
        }
        // Second Player Character Drop Down Table  
        if (Char2Drop.getSelectedItem().toString().equals("Fighter")){
            FighterChar FighterChar2= new FighterChar("Fighter2");
            i++;
        }
        else if (Char2Drop.getSelectedItem().toString().equals("Rogue")){
            RogueChar RogueChar2= new RogueChar("Rogue2");
            PCarray[i]= RogueChar2;
            i++;
        }
        else if (Char2Drop.getSelectedItem().toString().equals("Cleric")){
            ClericChar ClericChar2= new ClericChar("Cleric2");
            PCarray[i]= ClericChar2;
            i++;
        }
        else if (Char2Drop.getSelectedItem().toString().equals("Ranger")){
            RangerChar RangerChar2= new RangerChar("Ranger2");
            PCarray[i]= RangerChar2;
            i++;
        }
        else if (Char2Drop.getSelectedItem().toString().equals("Wizard")){
            WizardChar WizardChar2= new WizardChar("Wizard2");
            PCarray[i]= WizardChar2;
            i++;
        }
        //Third Character Drop Down
        if (Char3Drop.getSelectedItem().toString().equals("Fighter")){
            FighterChar FighterChar3= new FighterChar("Fighter3");
            PCarray[i]= FighterChar3;
            i++;
        }
        else if (Char3Drop.getSelectedItem().toString().equals("Rogue")){
            RogueChar RogueChar3= new RogueChar("Rogue3");
            PCarray[i]= RogueChar3;
            i++;
        }
        else if (Char3Drop.getSelectedItem().toString().equals("Cleric")){
            ClericChar ClericChar3= new ClericChar("Cleric3");
            PCarray[i]= ClericChar3;
            i++;
        }
        else if (Char3Drop.getSelectedItem().toString().equals("Ranger")){
            RangerChar RangerChar3= new RangerChar("Ranger3");
            PCarray[i]= RangerChar3;
            i++;
        }
        else if (Char3Drop.getSelectedItem().toString().equals("Wizard")){
            WizardChar WizardChar3= new WizardChar("Wizard3");
            PCarray[i]= WizardChar3;
            i++;
        }
        // Fourth Character Drop down table
        if (Char4Drop.getSelectedItem().toString().equals("Fighter")){
            FighterChar FighterChar4= new FighterChar("Fighter4");
            PCarray[i]= FighterChar4;
            i++;
        }
        else if (Char4Drop.getSelectedItem().toString().equals("Rogue")){
            RogueChar RogueChar4= new RogueChar("Rogue4");
            PCarray[i]= RogueChar4;
            i++;
        }
        else if (Char4Drop.getSelectedItem().toString().equals("Cleric")){
            ClericChar ClericChar4= new ClericChar("Cleric4");
            PCarray[i]= ClericChar4;
            i++;
        }
        else if (Char4Drop.getSelectedItem().toString().equals("Ranger")){
            RangerChar RangerChar4= new RangerChar("Ranger4");
            PCarray[i]= RangerChar4;
            i++;
        }
        else if (Char4Drop.getSelectedItem().toString().equals("Wizard")){
            WizardChar WizardChar4= new WizardChar("Wizard4");
            PCarray[i]= WizardChar4;
            i++;
        }
        // First Monster Drop Down table
        if (Monster1Drop.getSelectedItem().toString().equals("Bandit")){
            Bandit bandit1= new Bandit("Bandit1");
            Monsterarray[j]= bandit1;
            j++;
        }
        else if (Monster1Drop.getSelectedItem().toString().equals("Boss Goblin")){
            BossGoblin bossgoblin1= new BossGoblin("BossGoblin1");
            Monsterarray[j]= bossgoblin1;
            j++;
        }
        else if (Monster1Drop.getSelectedItem().toString().equals("Crab")){
            Crab crab1= new Crab("Crab1");
            Monsterarray[j]= crab1;
            j++;
        }
        else if (Monster1Drop.getSelectedItem().toString().equals("Fire Beatle")){
            FireBeatle firebeatle1= new FireBeatle("FireBeatle1");
            Monsterarray[j]= firebeatle1;
            j++;
        }
        else if (Monster1Drop.getSelectedItem().toString().equals("Goblin")){
            Goblin goblin1= new Goblin("Goblin1");
            Monsterarray[j]= goblin1;
            j++;
        }
        else if (Monster1Drop.getSelectedItem().toString().equals("Half Ogre")){
            HalfOgre halfogre1= new HalfOgre("HalfOgre1");
            Monsterarray[j]= halfogre1;
            j++;
        }
        else if (Monster1Drop.getSelectedItem().toString().equals("Hobgoblin")){
            Hobgoblin hobgoblin1= new Hobgoblin("Hobgoblin1");
            Monsterarray[j]= hobgoblin1;
            j++;
        }
        else if (Monster1Drop.getSelectedItem().toString().equals("Kobold")){
            Kobold kobold1= new Kobold("Kobold1");
            Monsterarray[j]= kobold1;
            j++;
        }
        else if (Monster1Drop.getSelectedItem().toString().equals("Ogre")){
            Ogre ogre1= new Ogre("Ogre1");
            Monsterarray[j]= ogre1;
            j++;
        }
        else if (Monster1Drop.getSelectedItem().toString().equals("Shrub")){
            Shrub shrub1= new Shrub("Shrub1");
            Monsterarray[j]= shrub1;
            j++;
        }
        else if (Monster1Drop.getSelectedItem().toString().equals("Skeleton")){
            Skeleton skeleton1= new Skeleton("Skeleton1");
            Monsterarray[j]= skeleton1;
            j++;
        }
        else if (Monster1Drop.getSelectedItem().toString().equals("Tree")){
            Tree tree1= new Tree("Tree1");
            Monsterarray[j]= tree1;
            j++;
        }
        else if (Monster1Drop.getSelectedItem().toString().equals("Warhorse Skeleton")){
            WarhorseSkeleton warhorseskeleton1= new WarhorseSkeleton("WarhorseSkeleton1");
            Monsterarray[j]= warhorseskeleton1;
            j++;
        }
        else if (Monster1Drop.getSelectedItem().toString().equals("Wolf")){
            Wolf wolf1= new Wolf("Wolf1");
            Monsterarray[j]= wolf1;
            j++;
        }
        else if (Monster1Drop.getSelectedItem().toString().equals("None")){
        }
        else{
            System.out.print("ERROR");
        }
        // Second Monster Drop Down menu
        if (Monster2Drop.getSelectedItem().toString().equals("Bandit")){
            Bandit bandit2= new Bandit("Bandit2");
            Monsterarray[j]= bandit2;
            j++;
        }
        else if (Monster2Drop.getSelectedItem().toString().equals("Boss Goblin")){
            BossGoblin bossgoblin2= new BossGoblin("BossGoblin2");
            Monsterarray[j]= bossgoblin2;
            j++;
        }
        else if (Monster2Drop.getSelectedItem().toString().equals("Crab")){
            Crab crab2= new Crab("Crab2");
            Monsterarray[j]= crab2;
            j++;
        }
        else if (Monster2Drop.getSelectedItem().toString().equals("Fire Beatle")){
            FireBeatle firebeatle2= new FireBeatle("FireBeatle2");
            Monsterarray[j]= firebeatle2;
            j++;
        }
        else if (Monster2Drop.getSelectedItem().toString().equals("Goblin")){
            Goblin goblin2= new Goblin("Goblin2");
            Monsterarray[j]= goblin2;
            j++;
        }
        else if (Monster2Drop.getSelectedItem().toString().equals("Half Ogre")){
            HalfOgre halfogre2= new HalfOgre("HalfOgre2");
            Monsterarray[j]= halfogre2;
            j++;
        }
        else if (Monster2Drop.getSelectedItem().toString().equals("Hobgoblin")){
            Hobgoblin hobgoblin2= new Hobgoblin("Hobgoblin2");
            Monsterarray[j]= hobgoblin2;
            j++;
        }
        else if (Monster2Drop.getSelectedItem().toString().equals("Kobold")){
            Kobold kobold2= new Kobold("Kobold2");
            Monsterarray[j]= kobold2;
            j++;
        }
        else if (Monster2Drop.getSelectedItem().toString().equals("Ogre")){
            Ogre ogre2= new Ogre("Ogre2");
            Monsterarray[j]= ogre2;
            j++;
        }
        else if (Monster2Drop.getSelectedItem().toString().equals("Shrub")){
            Shrub shrub2= new Shrub("Shrub2");
            Monsterarray[j]= shrub2;
            j++;
        }
        else if (Monster2Drop.getSelectedItem().toString().equals("Skeleton")){
            Skeleton skeleton2= new Skeleton("Skeleton2");
            Monsterarray[j]= skeleton2;
            j++;
        }
        else if (Monster2Drop.getSelectedItem().toString().equals("Tree")){
            Tree tree2= new Tree("Tree2");
            Monsterarray[j]= tree2;
            j++;
        }
        else if (Monster2Drop.getSelectedItem().toString().equals("Warhorse Skeleton")){
            WarhorseSkeleton warhorseskeleton2= new WarhorseSkeleton("WarhorseSkeleton2");
            Monsterarray[j]= warhorseskeleton2;
            j++;
        }
        else if (Monster2Drop.getSelectedItem().toString().equals("Wolf")){
            Wolf wolf2= new Wolf("Wolf2");
            Monsterarray[j]= wolf2;
            j++;
        }
        else if (Monster2Drop.getSelectedItem().toString().equals("None")){
        }
        else{
            System.out.print("ERROR");
        }
        // Third monster drop down table
        if (Monster3Drop.getSelectedItem().toString().equals("Bandit")){
            Bandit bandit3= new Bandit("Bandit3");
            Monsterarray[j]= bandit3;
            j++;
        }
        else if (Monster3Drop.getSelectedItem().toString().equals("Boss Goblin")){
            BossGoblin bossgoblin3= new BossGoblin("BossGoblin3");
            Monsterarray[j]= bossgoblin3;
            j++;
        }
        else if (Monster3Drop.getSelectedItem().toString().equals("Crab")){
            Crab crab3= new Crab("Crab3");
            Monsterarray[j]= crab3;
            j++;
        }
        else if (Monster3Drop.getSelectedItem().toString().equals("Fire Beatle")){
            FireBeatle firebeatle3= new FireBeatle("FireBeatle3");
            Monsterarray[j]= firebeatle3;
            j++;
        }
        else if (Monster3Drop.getSelectedItem().toString().equals("Goblin")){
            Goblin goblin3= new Goblin("Goblin3");
            Monsterarray[j]= goblin3;
            j++;
        }
        else if (Monster3Drop.getSelectedItem().toString().equals("Half Ogre")){
            HalfOgre halfogre3= new HalfOgre("HalfOgre3");
            Monsterarray[j]= halfogre3;
            j++;
        }
        else if (Monster3Drop.getSelectedItem().toString().equals("Hobgoblin")){
            Hobgoblin hobgoblin3= new Hobgoblin("Hobgoblin3");
            Monsterarray[j]= hobgoblin3;
            j++;
        }
        else if (Monster3Drop.getSelectedItem().toString().equals("Kobold")){
            Kobold kobold3= new Kobold("Kobold3");
            Monsterarray[j]= kobold3;
            j++;
        }
        else if (Monster3Drop.getSelectedItem().toString().equals("Ogre")){
            Ogre ogre3= new Ogre("Ogre3");
            Monsterarray[j]= ogre3;
            j++;
        }
        else if (Monster3Drop.getSelectedItem().toString().equals("Shrub")){
            Shrub shrub3= new Shrub("Shrub3");
            Monsterarray[j]= shrub3;
            j++;
        }
        else if (Monster3Drop.getSelectedItem().toString().equals("Skeleton")){
            Skeleton skeleton3= new Skeleton("Skeleton3");
            Monsterarray[j]= skeleton3;
            j++;
        }
        else if (Monster3Drop.getSelectedItem().toString().equals("Tree")){
            Tree tree3= new Tree("Tree3");
            Monsterarray[j]= tree3;
            j++;
        }
        else if (Monster3Drop.getSelectedItem().toString().equals("Warhorse Skeleton")){
            WarhorseSkeleton warhorseskeleton3= new WarhorseSkeleton("WarhorseSkeleton3");
            Monsterarray[j]= warhorseskeleton3;
            j++;
        }
        else if (Monster3Drop.getSelectedItem().toString().equals("Wolf")){
            Wolf wolf3= new Wolf("Wolf3");
            Monsterarray[j]= wolf3;
            j++;
        }
        else if (Monster3Drop.getSelectedItem().toString().equals("None")){
        }
        else{
            System.out.print("ERROR");
        }
        //fourth monster drop down table
        if (Monster4Drop.getSelectedItem().toString().equals("Bandit")){
            Bandit bandit4= new Bandit("Bandit4");
            Monsterarray[j]= bandit4;
            j++;
        }
        else if (Monster4Drop.getSelectedItem().toString().equals("Boss Goblin")){
            BossGoblin bossgoblin4= new BossGoblin("BossGoblin4");
            Monsterarray[j]= bossgoblin4;
            j++;
        }
        else if (Monster4Drop.getSelectedItem().toString().equals("Crab")){
            Crab crab4= new Crab("Crab4");
            Monsterarray[j]= crab4;
            j++;
        }
        else if (Monster4Drop.getSelectedItem().toString().equals("Fire Beatle")){
            FireBeatle firebeatle4= new FireBeatle("FireBeatle4");
            Monsterarray[j]= firebeatle4;
            j++;
        }
        else if (Monster4Drop.getSelectedItem().toString().equals("Goblin")){
            Goblin goblin4= new Goblin("Goblin4");
            Monsterarray[j]= goblin4;
            j++;
        }
        else if (Monster4Drop.getSelectedItem().toString().equals("Half Ogre")){
            HalfOgre halfogre4= new HalfOgre("HalfOgre4");
            Monsterarray[j]= halfogre4;
            j++;
        }
        else if (Monster4Drop.getSelectedItem().toString().equals("Hobgoblin")){
            Hobgoblin hobgoblin4= new Hobgoblin("Hobgoblin4");
            Monsterarray[j]= hobgoblin4;
            j++;
        }
        else if (Monster4Drop.getSelectedItem().toString().equals("Kobold")){
            Kobold kobold4= new Kobold("Kobold4");
            Monsterarray[j]= kobold4;
            j++;
        }
        else if (Monster4Drop.getSelectedItem().toString().equals("Ogre")){
            Ogre ogre4= new Ogre("Ogre4");
            Monsterarray[j]= ogre4;
            j++;
        }
        else if (Monster4Drop.getSelectedItem().toString().equals("Shrub")){
            Shrub shrub4= new Shrub("Shrub4");
            Monsterarray[j]= shrub4;
            j++;
        }
        else if (Monster4Drop.getSelectedItem().toString().equals("Skeleton")){
            Skeleton skeleton4= new Skeleton("Skeleton4");
            Monsterarray[j]= skeleton4;
            j++;
        }
        else if (Monster4Drop.getSelectedItem().toString().equals("Tree")){
            Tree tree4= new Tree("Tree4");
            Monsterarray[j]= tree4;
            j++;
        }
        else if (Monster4Drop.getSelectedItem().toString().equals("Warhorse Skeleton")){
            WarhorseSkeleton warhorseskeleton4= new WarhorseSkeleton("WarhorseSkeleton4");
            Monsterarray[j]= warhorseskeleton4;
            j++;
        }
        else if (Monster4Drop.getSelectedItem().toString().equals("Wolf")){
            Wolf wolf4= new Wolf("Wolf4");
            Monsterarray[j]= wolf4;
            j++;
        }
        else if (Monster4Drop.getSelectedItem().toString().equals("None")){
        }
        else{
            System.out.print("ERROR");
        }
        //Fifth Monster Drop down table
        if (Monster5Drop.getSelectedItem().toString().equals("Bandit")){
            Bandit bandit5= new Bandit("Bandit5");
            Monsterarray[j]= bandit5;
            j++;
        }
        else if (Monster5Drop.getSelectedItem().toString().equals("Boss Goblin")){
            BossGoblin bossgoblin5= new BossGoblin("BossGoblin5");
            Monsterarray[j]= bossgoblin5;
            j++;
        }
        else if (Monster5Drop.getSelectedItem().toString().equals("Crab")){
            Crab crab5= new Crab("Crab5");
            Monsterarray[j]= crab5;
            j++;
        }
        else if (Monster5Drop.getSelectedItem().toString().equals("Fire Beatle")){
            FireBeatle firebeatle5= new FireBeatle("FireBeatle5");
            Monsterarray[j]= firebeatle5;
            j++;
        }
        else if (Monster5Drop.getSelectedItem().toString().equals("Goblin")){
            Goblin goblin5= new Goblin("Goblin5");
            Monsterarray[j]= goblin5;
            j++;
        }
        else if (Monster5Drop.getSelectedItem().toString().equals("Half Ogre")){
            HalfOgre halfogre5= new HalfOgre("HalfOgre5");
            Monsterarray[j]= halfogre5;
            j++;
        }
        else if (Monster5Drop.getSelectedItem().toString().equals("Hobgoblin")){
            Hobgoblin hobgoblin5= new Hobgoblin("Hobgoblin5");
            Monsterarray[j]= hobgoblin5;
            j++;
        }
        else if (Monster5Drop.getSelectedItem().toString().equals("Kobold")){
            Kobold kobold5= new Kobold("Kobold5");
            Monsterarray[j]= kobold5;
            j++;
        }
        else if (Monster5Drop.getSelectedItem().toString().equals("Ogre")){
            Ogre ogre5= new Ogre("Ogre5");
            Monsterarray[j]= ogre5;
            j++;
        }
        else if (Monster5Drop.getSelectedItem().toString().equals("Shrub")){
            Shrub shrub5= new Shrub("Shrub5");
            Monsterarray[j]= shrub5;
            j++;
        }
        else if (Monster5Drop.getSelectedItem().toString().equals("Skeleton")){
            Skeleton skeleton5= new Skeleton("Skeleton5");
            Monsterarray[j]= skeleton5;
            j++;
        }
        else if (Monster5Drop.getSelectedItem().toString().equals("Tree")){
            Tree tree5= new Tree("Tree5");
            Monsterarray[j]= tree5;
            j++;
        }
        else if (Monster5Drop.getSelectedItem().toString().equals("Warhorse Skeleton")){
            WarhorseSkeleton warhorseskeleton5= new WarhorseSkeleton("WarhorseSkeleton5");
            Monsterarray[j]= warhorseskeleton5;
            j++;
        }
        else if (Monster5Drop.getSelectedItem().toString().equals("Wolf")){
            Wolf wolf5= new Wolf("Wolf5");
            Monsterarray[j]= wolf5;
            j++;
        }
        else if (Monster5Drop.getSelectedItem().toString().equals("None")){
        }
        else{
            System.out.print("ERROR");
        }
        //Sixth Monster Drop down table
        if (Monster6Drop.getSelectedItem().toString().equals("Bandit")){
            Bandit bandit6= new Bandit("Bandit6");
            Monsterarray[j]= bandit6;
            j++;
        }
        else if (Monster6Drop.getSelectedItem().toString().equals("Boss Goblin")){
            BossGoblin bossgoblin6= new BossGoblin("BossGoblin6");
            Monsterarray[j]= bossgoblin6;
            j++;
        }
        else if (Monster6Drop.getSelectedItem().toString().equals("Crab")){
            Crab crab6= new Crab("Crab6");
            Monsterarray[j]= crab6;
            j++;
        }
        else if (Monster6Drop.getSelectedItem().toString().equals("Fire Beatle")){
            FireBeatle firebeatle6= new FireBeatle("FireBeatle6");
            Monsterarray[j]= firebeatle6;
            j++;
        }
        else if (Monster6Drop.getSelectedItem().toString().equals("Goblin")){
            Goblin goblin6= new Goblin("Goblin6");
            Monsterarray[j]= goblin6;
            j++;
        }
        else if (Monster6Drop.getSelectedItem().toString().equals("Half Ogre")){
            HalfOgre halfogre6= new HalfOgre("HalfOgre6");
            Monsterarray[j]= halfogre6;
            j++;
        }
        else if (Monster6Drop.getSelectedItem().toString().equals("Hobgoblin")){
            Hobgoblin hobgoblin6= new Hobgoblin("Hobgoblin6");
            Monsterarray[j]= hobgoblin6;
            j++;
        }
        else if (Monster6Drop.getSelectedItem().toString().equals("Kobold")){
            Kobold kobold6= new Kobold("Kobold6");
            Monsterarray[j]= kobold6;
            j++;
        }
        else if (Monster6Drop.getSelectedItem().toString().equals("Ogre")){
            Ogre ogre6= new Ogre("Ogre6");
            Monsterarray[j]= ogre6;
            j++;
        }
        else if (Monster6Drop.getSelectedItem().toString().equals("Shrub")){
            Shrub shrub6= new Shrub("Shrub6");
            Monsterarray[j]= shrub6;
            j++;
        }
        else if (Monster6Drop.getSelectedItem().toString().equals("Skeleton")){
            Skeleton skeleton6= new Skeleton("Skeleton6");
            Monsterarray[j]= skeleton6;
            j++;
        }
        else if (Monster6Drop.getSelectedItem().toString().equals("Tree")){
            Tree tree6= new Tree("Tree6");
            Monsterarray[j]= tree6;
            j++;
        }
        else if (Monster6Drop.getSelectedItem().toString().equals("Warhorse Skeleton")){
            WarhorseSkeleton warhorseskeleton6= new WarhorseSkeleton("WarhorseSkeleton6");
            Monsterarray[j]= warhorseskeleton6;
            j++;
        }
        else if (Monster6Drop.getSelectedItem().toString().equals("Wolf")){
            Wolf wolf6= new Wolf("Wolf6");
            Monsterarray[j]= wolf6;
            j++;
        }
        else if (Monster6Drop.getSelectedItem().toString().equals("None")){
        }
        else{
            System.out.print("ERROR");
        }
        //Seventh Monster Drop Down table
        if (Monster7Drop.getSelectedItem().toString().equals("Bandit")){
            Bandit bandit7= new Bandit("Bandit7");
            Monsterarray[j]= bandit7;
            j++;
        }
        else if (Monster7Drop.getSelectedItem().toString().equals("Boss Goblin")){
            BossGoblin bossgoblin7= new BossGoblin("BossGoblin7");
            Monsterarray[j]= bossgoblin7;
            j++;
        }
        else if (Monster7Drop.getSelectedItem().toString().equals("Crab")){
            Crab crab7= new Crab("Crab7");
            Monsterarray[j]= crab7;
            j++;
        }
        else if (Monster7Drop.getSelectedItem().toString().equals("Fire Beatle")){
            FireBeatle firebeatle7= new FireBeatle("FireBeatle7");
            Monsterarray[j]= firebeatle7;
            j++;
        }
        else if (Monster7Drop.getSelectedItem().toString().equals("Goblin")){
            Goblin goblin7= new Goblin("Goblin7");
            Monsterarray[j]= goblin7;
            j++;
        }
        else if (Monster7Drop.getSelectedItem().toString().equals("Half Ogre")){
            HalfOgre halfogre7= new HalfOgre("HalfOgre7");
            Monsterarray[j]= halfogre7;
            j++;
        }
        else if (Monster7Drop.getSelectedItem().toString().equals("Hobgoblin")){
            Hobgoblin hobgoblin7= new Hobgoblin("Hobgoblin7");
            Monsterarray[j]= hobgoblin7;
            j++;
        }
        else if (Monster7Drop.getSelectedItem().toString().equals("Kobold")){
            Kobold kobold7= new Kobold("Kobold7");
            Monsterarray[j]= kobold7;
            j++;
        }
        else if (Monster7Drop.getSelectedItem().toString().equals("Ogre")){
            Ogre ogre7= new Ogre("Ogre7");
            Monsterarray[j]= ogre7;
            j++;
        }
        else if (Monster7Drop.getSelectedItem().toString().equals("Shrub")){
            Shrub shrub7= new Shrub("Shrub7");
            Monsterarray[j]= shrub7;
            j++;
        }
        else if (Monster7Drop.getSelectedItem().toString().equals("Skeleton")){
            Skeleton skeleton7= new Skeleton("Skeleton7");
            Monsterarray[j]= skeleton7;
            j++;
        }
        else if (Monster7Drop.getSelectedItem().toString().equals("Tree")){
            Tree tree7= new Tree("Tree7");
            Monsterarray[j]= tree7;
            j++;
        }
        else if (Monster7Drop.getSelectedItem().toString().equals("Warhorse Skeleton")){
            WarhorseSkeleton warhorseskeleton7= new WarhorseSkeleton("WarhorseSkeleton7");
            Monsterarray[j]= warhorseskeleton7;
            j++;
        }
        else if (Monster7Drop.getSelectedItem().toString().equals("Wolf")){
            Wolf wolf7= new Wolf("Wolf7");
            Monsterarray[j]= wolf7;
            j++;
        }
        else if (Monster7Drop.getSelectedItem().toString().equals("None")){
        }
        else{
            System.out.print("ERROR");
        }
        //Eighth Monster Drop Down Table
        if (Monster8Drop.getSelectedItem().toString().equals("Bandit")){
            Bandit bandit8= new Bandit("Bandit8");
            Monsterarray[j]= bandit8;
            j++;
        }
        else if (Monster8Drop.getSelectedItem().toString().equals("Boss Goblin")){
            BossGoblin bossgoblin8= new BossGoblin("BossGoblin8");
            Monsterarray[j]= bossgoblin8;
            j++;
        }
        else if (Monster8Drop.getSelectedItem().toString().equals("Crab")){
            Crab crab8= new Crab("Crab8");
            Monsterarray[j]= crab8;
            j++;
        }
        else if (Monster8Drop.getSelectedItem().toString().equals("Fire Beatle")){
            FireBeatle firebeatle8= new FireBeatle("FireBeatle8");
            Monsterarray[j]= firebeatle8;
            j++;
        }
        else if (Monster8Drop.getSelectedItem().toString().equals("Goblin")){
            Goblin goblin8= new Goblin("Goblin8");
            Monsterarray[j]= goblin8;
            j++;
        }
        else if (Monster8Drop.getSelectedItem().toString().equals("Half Ogre")){
            HalfOgre halfogre8= new HalfOgre("HalfOgre8");
            Monsterarray[j]= halfogre8;
            j++;
        }
        else if (Monster3Drop.getSelectedItem().toString().equals("Hobgoblin")){
            Hobgoblin hobgoblin3= new Hobgoblin("Hobgoblin3");
            Monsterarray[j]= hobgoblin3;
            j++;
        }
        else if (Monster8Drop.getSelectedItem().toString().equals("Kobold")){
            Kobold kobold8= new Kobold("Kobold8");
            Monsterarray[j]= kobold8;
            j++;
        }
        else if (Monster8Drop.getSelectedItem().toString().equals("Ogre")){
            Ogre ogre8= new Ogre("Ogre8");
            Monsterarray[j]= ogre8;
            j++;
        }
        else if (Monster8Drop.getSelectedItem().toString().equals("Shrub")){
            Shrub shrub8= new Shrub("Shrub8");
            Monsterarray[j]= shrub8;
            j++;
        }
        else if (Monster8Drop.getSelectedItem().toString().equals("Skeleton")){
            Skeleton skeleton8= new Skeleton("Skeleton8");
            Monsterarray[j]= skeleton8;
            j++;
        }
        else if (Monster8Drop.getSelectedItem().toString().equals("Tree")){
            Tree tree8= new Tree("Tree8");
            Monsterarray[j]= tree8;
            j++;
        }
        else if (Monster8Drop.getSelectedItem().toString().equals("Warhorse Skeleton")){
            WarhorseSkeleton warhorseskeleton8= new WarhorseSkeleton("WarhorseSkeleton8");
            Monsterarray[j]= warhorseskeleton8;
            j++;
        }
        else if (Monster8Drop.getSelectedItem().toString().equals("Wolf")){
            Wolf wolf8= new Wolf("Wolf8");
            Monsterarray[j]= wolf8;
            j++;
        }
        else if (Monster8Drop.getSelectedItem().toString().equals("None")){
        }
        else{
            System.out.print("ERROR");
        }
        // Pass object retun percentage
    }//GEN-LAST:event_jButton1ActionPerformed

    private void CustomMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CustomMapActionPerformed
        StateManager manage1= new StateManager;
        manage1.
    }//GEN-LAST:event_CustomMapActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Char1Drop;
    private javax.swing.JComboBox<String> Char2Drop;
    private javax.swing.JComboBox<String> Char3Drop;
    private javax.swing.JComboBox<String> Char4Drop;
    private javax.swing.JButton CustomMap;
    private javax.swing.JComboBox<String> Monster1Drop;
    private javax.swing.JComboBox<String> Monster2Drop;
    private javax.swing.JComboBox<String> Monster3Drop;
    private javax.swing.JComboBox<String> Monster4Drop;
    private javax.swing.JComboBox<String> Monster5Drop;
    private javax.swing.JComboBox<String> Monster6Drop;
    private javax.swing.JComboBox<String> Monster7Drop;
    private javax.swing.JComboBox<String> Monster8Drop;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
